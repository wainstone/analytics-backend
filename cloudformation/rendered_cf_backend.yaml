Conditions:
  DeployApi:
    Fn::Equals:
    - Ref: ApiReadyToDeploy
    - 'true'
Parameters:
  AccountId:
    Default: '495679467660'
    Type: String
  ApiReadyToDeploy:
    AllowedValues:
    - 'true'
    - 'false'
    Description: Specifies if the lambda functions are created such that the API can
      be deployed.
    Type: String
  Environment:
    Default: dev
    Type: String
  LambdaName:
    Default: get_all_athletes
    Type: String
  ProjectName:
    Default: athlytics_jy75
    Type: String
  Region:
    Default: ca-central-1
    Type: String
  TableName:
    Default: athlytics_jy75
    Type: String
Resources:
  apiGateway:
    Properties:
      Description: Rest API for Athlytics Capstone Project
      EndpointConfiguration:
        Types:
        - EDGE
      Name:
        Fn::Sub: ${ProjectName}_api_${Environment}
    Type: AWS::ApiGateway::RestApi
  apiGatewayDeployment:
    Condition: DeployApi
    DependsOn:
    - athletesApiResource
    Properties:
      RestApiId:
        Ref: apiGateway
    Type: AWS::ApiGateway::Deployment
  apiGatewayStage:
    Condition: DeployApi
    DependsOn:
    - athletesApiResource
    Properties:
      DeploymentId:
        Ref: apiGatewayDeployment
      Description:
        Fn::Sub: Deployment stage for ${Environment} environment.
      MethodSettings:
      - HttpMethod: POST
        MetricsEnabled: 'true'
        ResourcePath: /athletes
      RestApiId:
        Ref: apiGateway
      StageName:
        Ref: Environment
    Type: AWS::ApiGateway::Stage
  athletesApiResource:
    DependsOn:
    - apiGateway
    Properties:
      ParentId:
        Fn::GetAtt:
        - apiGateway
        - RootResourceId
      PathPart: athletes
      RestApiId:
        Ref: apiGateway
    Type: AWS::ApiGateway::Resource
  dynamodbTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: Athlete
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: Athlete
        KeyType: HASH
      TableName:
        Fn::Sub: ${TableName}-${Environment}
    Type: AWS::DynamoDB::Table
  functionTwoApiGatewayInvoke:
    DependsOn:
    - apiGateway
    - functionTwoLambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - functionTwoLambdaFunction
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${Region}:${AccountId}:${apiGateway}/*
    Type: AWS::Lambda::Permission
  functionTwoApiMethod:
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${Region}:${AccountId}:function:functionTwo-${Environment}/invocations
      OperationName: functionTwo
      ResourceId:
        Ref: athletesApiResource
      RestApiId:
        Ref: apiGateway
    Type: AWS::ApiGateway::Method
  functionTwoLambdaFunction:
    Properties:
      Code:
        ZipFile: "exports.handler = async (event) => {\n    const response = {\n \
          \       statusCode: 200,\n        body: JSON.stringify(\"Im function two!\"\
          ),\n    };\n    return response;\n};\n"
      FunctionName:
        Fn::Sub: functionTwo-${Environment}
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - functionTwoRoleoptions
        - Arn
      Runtime: nodejs12.x
    Type: AWS::Lambda::Function
  functionTwoRoleoptions:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: AWSLambdaBasicExecutionRole
      - PolicyDocument:
          Statement:
          - Action:
            - dynamodb:*
            Effect: Allow
            Resource:
              Fn::Sub: arn:aws:dynamodb:ca-central-1:${AccountId}:table/${TableName}-${Environment}
          Version: '2012-10-17'
        PolicyName: AthlyticsDynamoAccess
      RoleName: functionTwoRole-options
    Type: AWS::IAM::Role
  handleGetApiGatewayInvoke:
    DependsOn:
    - apiGateway
    - handleGetLambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - handleGetLambdaFunction
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${Region}:${AccountId}:${apiGateway}/*
    Type: AWS::Lambda::Permission
  handleGetApiMethod:
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${Region}:${AccountId}:function:handleGet-${Environment}/invocations
      OperationName: handleGet
      ResourceId:
        Ref: athletesApiResource
      RestApiId:
        Ref: apiGateway
    Type: AWS::ApiGateway::Method
  handleGetLambdaFunction:
    Properties:
      Code:
        ZipFile: "const AWS = require('aws-sdk');\n\nconst dynamo = new AWS.DynamoDB.DocumentClient();\n\
          \nexports.handler = async (event, context) => {\n    let body;\n    let\
          \ statusCode = '200';\n    const headers = {\n        'Content-Type': 'application/json',\n\
          \        \"Access-Control-Allow-Origin\" : \"*\",\n        \"Access-Control-Allow-Credentials\"\
          \ : true\n    };\n    let command = parseInt(event.headers.command)\n  \
          \  console.log(command)\n    try {\n        switch (command) {\n       \
          \     case 1:\n                body = \"FindSimilar called\";\n        \
          \        break;\n            default:\n                throw new Error(`Unsupported\
          \ method \"${event.httpMethod}\"`);\n        }\n\n        \n    } catch\
          \ (err) {\n        statusCode = '400';\n        body = err.message;\n  \
          \  } finally {\n        body = JSON.stringify(body);\n    }\n    return\
          \ {\n        statusCode,\n        body,\n        headers,\n    };\n};\n\n\
          function meanSquareError(athletes, placements, threshold) {\n    let similar\
          \ = [];\n    for (const [athlete, races] of Object.entries(athletes)) {\n\
          \n        let hsRaces = races.filter(race => race.category != \"university\"\
          );\n\n        if (hsRaces.length < placements.length) {\n            continue;\n\
          \        }\n\n        length = Math.min(hsRaces.length, placements.length);\n\
          \        let sum = 0;\n        for (i = 0; i < length; i++) {\n        \
          \    sum += Math.pow((hsRaces[i].place - placements[i]), 2)\n        }\n\
          \        let mse = sum / length;\n        \n        similar.push({'athlete':\
          \ athlete, 'mse': mse});\n    }\n    similar.sort((a, b) => a.mse - b.mse);\n\
          \n    topAthletes = {};\n    for (i = 0; i < Math.min(threshold, similar.length);\
          \ i++) {\n        topAthletes[similar[i].athlete] = athletes[similar[i].athlete];\n\
          \    }\n    return topAthletes;\n}\n"
      FunctionName:
        Fn::Sub: handleGet-${Environment}
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - handleGetRoleoptions
        - Arn
      Runtime: nodejs12.x
    Type: AWS::Lambda::Function
  handleGetRoleoptions:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: AWSLambdaBasicExecutionRole
      - PolicyDocument:
          Statement:
          - Action:
            - dynamodb:*
            Effect: Allow
            Resource:
              Fn::Sub: arn:aws:dynamodb:ca-central-1:${AccountId}:table/${TableName}-${Environment}
          Version: '2012-10-17'
        PolicyName: AthlyticsDynamoAccess
      RoleName: handleGetRole-options
    Type: AWS::IAM::Role
  optionsApiMethod:
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''POST,GET,OPTIONS'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: ''
          StatusCode: 200
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
        StatusCode: 200
      ResourceId:
        Ref: athletesApiResource
      RestApiId:
        Ref: apiGateway
    Type: AWS::ApiGateway::Method
