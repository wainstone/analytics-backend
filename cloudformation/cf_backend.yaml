Conditions:
  DeployApi:
    Fn::Equals:
    - Ref: ApiReadyToDeploy
    - 'true'
Parameters:
  AccountId:
    Default: '495679467660'
    Type: String
  ApiReadyToDeploy:
    AllowedValues:
    - 'true'
    - 'false'
    Description: Specifies if the lambda functions are created such that the API can
      be deployed.
    Type: String
  Environment:
    Default: dev
    Type: String
  LambdaName:
    Default: get_all_athletes
    Type: String
  ProjectName:
    Default: athlytics_jy75
    Type: String
  Region:
    Default: ca-central-1
    Type: String
  TableName:
    Default: athlytics_jy75
    Type: String
Resources:
  apiGateway:
    Properties:
      Description: Rest API for Athlytics Capstone Project
      EndpointConfiguration:
        Types:
        - EDGE
      Name:
        Fn::Sub: ${ProjectName}_api
    Type: AWS::ApiGateway::RestApi
  apiGatewayDeployment:
    Condition: DeployApi
    DependsOn:
    - apiResource
    Properties:
      RestApiId:
        Ref: apiGateway
    Type: AWS::ApiGateway::Deployment
  apiGatewayStage:
    Condition: DeployApi
    DependsOn:
    - apiResource
    Properties:
      DeploymentId:
        Ref: apiGatewayDeployment
      Description:
        Fn::Sub: Deployment stage for ${Environment} environment.
      MethodSettings:
      - HttpMethod: POST
        MetricsEnabled: 'true'
        ResourcePath: /athletes
      RestApiId:
        Ref: apiGateway
      StageName:
        Ref: Environment
    Type: AWS::ApiGateway::Stage
  apiResource:
    DependsOn:
    - apiGateway
    Properties:
      ParentId:
        Fn::GetAtt:
        - apiGateway
        - RootResourceId
      PathPart: athletes
      RestApiId:
        Ref: apiGateway
    Type: AWS::ApiGateway::Resource
  dynamodbTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: Athlete
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: Athlete
        KeyType: HASH
      TableName:
        Fn::Sub: ${TableName}-${Environment}
    Type: AWS::DynamoDB::Table
  functionOneApiGatewayInvoke:
    DependsOn:
    - functionOneLambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::Sub: arn:aws:lambda:${Region}:${AccountId}:function:functionOne-${Environment}
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${Region}:${AccountId}:${apiGateway}/*
    Type: AWS::Lambda::Permission
  functionOneApiMethod:
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${Region}:${AccountId}:function:functionOne/invocations
      OperationName: functionOne
      ResourceId:
        Ref: apiResource
      RestApiId:
        Ref: apiGateway
    Type: AWS::ApiGateway::Method
  functionOneLambdaFunction:
    Properties:
      Code:
        ZipFile: 'exports.handler = async (event) => { const response = { statusCode:
          200, body: JSON.stringify(''function one YOHOO!''), }; return response;
          };'
      FunctionName:
        Fn::Sub: functionOne-${Environment}
      Handler: index.handler
      Role:
        Fn::Sub: arn:aws:iam::${AccountId}:role/service-role/infra-test-reply-message-role-ygzuoc99
      Runtime: nodejs12.x
    Type: AWS::Lambda::Function
