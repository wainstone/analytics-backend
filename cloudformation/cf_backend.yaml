Parameters:
  Region:
    Type: String 
    Default: "ca-central-1" 

  AccountId:
    Type: String 
    Default: "495679467660"

  LambdaName: 
    Type: String 
    Default: "get_all_athletes"

  TableName:
    Type: String 
    Default: "athlytics_jy75"

  ProjectName:
    Type: String
    Default: "athlytics_jy75"

  Environment:
    Type: String
    Default: "dev"

Resources:
  # Need: API gateway, API gateway method, maybe need API gateway resource, labmda function, dynamodb table

  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties: 
      # ApiKeySourceType: String (will need this eventually)
      Description: "Rest API for our 391 project"
      EndpointConfiguration: 
          Types: 
          - EDGE
      Name: 
          Fn::Sub: "${ProjectName}_api"
  
  # Initial testing route, eventually will add multiple routes for the different backend requests
  apiResource:
    Type: AWS::ApiGateway::Resource
    Properties: 
      ParentId: 
        Fn::GetAtt: [apiGateway, RootResourceId]
      PathPart: athletes
      RestApiId:
        Ref: apiGateway


  apiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: False
      AuthorizationType: NONE
      HttpMethod: GET
      Integration: 
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: 
          Fn::Sub: "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${Region}:${AccountId}:function:${LambdaName}/invocations"
      OperationName: 
        Ref: LambdaName
      ResourceId:
        Ref: apiResource
      RestApiId:
        Ref: apiGateway

  apiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - apiMethod
    Properties:
      RestApiId: 
        Ref: apiGateway
      StageName: 
        Fn::Sub: ${Environment}

  lambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    DependsOn:
      - lambdaFunction
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: 
        Fn::Sub: arn:aws:lambda:${Region}:${AccountId}:function:${LambdaName} # [lambdaFunction, Arn]
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: "arn:aws:execute-api:${Region}:${AccountId}:${apiGateway}/*"

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          const AWS = require('aws-sdk');

          const dynamo = new AWS.DynamoDB.DocumentClient();

          /**
          * Demonstrates a simple HTTP endpoint using API Gateway. You have full
          * access to the request and response payload, including headers and
          * status code.
          *
          * To scan a DynamoDB table, make a GET request with the TableName as a
          * query string parameter. To put, update, or delete an item, make a POST,
          * PUT, or DELETE request respectively, passing in the payload to the
          * DynamoDB API as a JSON body.
          */
          exports.handler = async (event, context) => {
              let body;
              let statusCode = '200';
              const headers = {
                  'Content-Type': 'application/json',
                  "Access-Control-Allow-Origin" : "*", // Required for CORS support to work
                  "Access-Control-Allow-Credentials" : true // Required for cookies, authorization headers with HTTPS 
              };

              try {
                  switch (event.httpMethod) {
                      case 'DELETE':
                          body = await dynamo.delete(JSON.parse(event.body)).promise();
                          break;
                      case 'GET':
                          body = await dynamo.scan({ TableName: event.queryStringParameters.TableName }).promise();
                          break;
                      case 'POST':
                          body = await dynamo.put(JSON.parse(event.body)).promise();
                          break;
                      case 'PUT':
                          body = await dynamo.update(JSON.parse(event.body)).promise();
                          break;
                      default:
                          throw new Error(`Unsupported method "${event.httpMethod}"`);
                  }
              } catch (err) {
                  statusCode = '400';
                  body = err.message;
              } finally {
                  body = JSON.stringify(body);
              }
              return {
                  statusCode,
                  body,
                  headers,
              };
          };


      Description: "The Lambda function to handle our backend logic."
      FunctionName: 
        Ref: LambdaName
      Handler: "index.handler"
      Role:
        Fn::Sub: "arn:aws:iam::${AccountId}:role/service-role/infra-test-reply-message-role-ygzuoc99"
      Runtime: nodejs12.x


  # lambdaIAMRole:
  #   Type: "AWS::IAM::Role"
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Action:
  #             - "sts:AssumeRole"
  #           Effect: "Allow"
  #           Principal:
  #             Service:
  #               - "lambda.amazonaws.com"
  #     Policies:
  #       - PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Action:
  #                 - "logs:CreateLogGroup"
  #                 - "logs:CreateLogStream"
  #                 - "logs:PutLogEvents"
  #               Effect: "Allow"
  #               Resource:
  #                 - Fn::Sub: "arn:aws:logs:${Region}:${AccountId}:log-group:/aws/lambda/${LambdaName}:*"
  #             - Action:
  #                 - "dynamodb:PutItem"
  #                 - "dynamodb:GetItem"
  #               Effect: "Allow"
  #               Resource:
  #                 - Fn::Sub: "arn:aws:dynamodb:${Region}:${AccountId}:table/${TableName}"
  #         PolicyName: 
  #           Ref: LambdaName

  dynamodbTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: "Athlete"
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema: 
        - AttributeName: "Athlete"
          KeyType: HASH
      TableName:
        Ref: TableName


Outputs:
  APIInvokeURL:
    Description: The url for our project to hit.
    Value: 
      Fn::Sub: "https://${apiGateway}.execute-api.${Region}.amazonaws.com/call/"