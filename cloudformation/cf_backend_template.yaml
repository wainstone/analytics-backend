---
Parameters:
  AccountId:
    Default: '495679467660'
    Type: String
  Environment:
    Default: dev
    Type: String
  ProjectName:
    Default: athlytics_jy75
    Type: String
  Region:
    Default: ca-central-1
    Type: String
  TableName:
    Default: athlytics_jy75
    Type: String
  LambdaBucketName:
    Default: athlytics_jy75_lambdas
    Type: String
  ApiReadyToDeploy:
    Description: Specifies if the lambda functions are created such that the API can be deployed. 
    Type: String
    AllowedValues:
      - "true"
      - "false" 

Conditions:
  DeployApi: 
    Fn::Equals: 
      - Ref: ApiReadyToDeploy
      - "true"

Resources:

  apiGateway:
    Properties:
      Description: Rest API for Athlytics Capstone Project
      EndpointConfiguration:
        Types:
        - EDGE
      Name:
        Fn::Sub: ${ProjectName}_api_${Environment}
    Type: AWS::ApiGateway::RestApi

  apiGatewayDeployment:
    Condition: DeployApi
    DependsOn:
    - athletesApiResource
    Properties:
      RestApiId:
        Ref: apiGateway
    Type: AWS::ApiGateway::Deployment

  apiGatewayStage:
    Condition: DeployApi
    DependsOn:
    - athletesApiResource
    Properties:
      DeploymentId:
        Ref: apiGatewayDeployment
      Description:
        Fn::Sub: Deployment stage for ${Environment} environment.
      MethodSettings:
      - HttpMethod: POST
        MetricsEnabled: 'true'
        ResourcePath: /athletes
      RestApiId:
        Ref: apiGateway
      StageName:
        Ref: Environment
    Type: AWS::ApiGateway::Stage

  athletesApiResource:
    DependsOn:
    - apiGateway
    Properties:
      ParentId:
        Fn::GetAtt:
        - apiGateway
        - RootResourceId
      PathPart: athletes
      RestApiId:
        Ref: apiGateway
    Type: AWS::ApiGateway::Resource

  athletesOptionsApiMethod:
    DependsOn:
    - athletesApiResource
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: apiGateway
      ResourceId:
        Ref: athletesApiResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  adminApiResource:
    DependsOn:
    - apiGateway
    Properties:
      ParentId:
        Fn::GetAtt:
        - apiGateway
        - RootResourceId
      PathPart: admin
      RestApiId:
        Ref: apiGateway
    Type: AWS::ApiGateway::Resource

  adminOptionsApiMethod:
    DependsOn:
    - adminApiResource
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: apiGateway
      ResourceId:
        Ref: adminApiResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  dynamodbTable:
    DeletionPolicy: Retain
    Properties:
      AttributeDefinitions:
      - AttributeName: athlete
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: athlete
        KeyType: HASH
      TableName:
        Fn::Sub: ${TableName}-${Environment}
    Type: AWS::DynamoDB::Table

# This is being commented out because the Lambda functions must be uploaded to the bucket before the stack is created since the Lambdas
# in CloudFormation need to reference the bucket. Ie: create bucket -> upload function code -> create cloudformation (Lambdas reference the code stored in S3)
  # lambdaBucket:
  #   Type: AWS::S3::Bucket
  #   Properties: 
  #     BucketName: 
  #       Fn::Sub: ${LambdaBucketName}
