{{ lambda_name }}Role:
  Type: AWS::IAM::Role
  Properties:
    RoleName: {{ lambda_name }}Role
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
      - Effect: Allow
        Principal:
          Service:
          - lambda.amazonaws.com
        Action:
        - sts:AssumeRole
    Path: "/"
    Policies:
    - PolicyName: AWSLambdaBasicExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: "*"

{{ lambda_name }}ApiMethod:
  Type: AWS::ApiGateway::Method
  Properties:
    ApiKeyRequired: False
    AuthorizationType: NONE
    HttpMethod: ANY
    Integration: 
      IntegrationHttpMethod: ANY
      Type: AWS_PROXY
      Uri: 
        Fn::Sub: "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${Region}:${AccountId}:function:{{ lambda_name }}-${Environment}/invocations"
    OperationName: {{ lambda_name }}
    ResourceId:
      Ref: apiResource
    RestApiId:
      Ref: apiGateway

{{ lambda_name }}ApiGatewayInvoke:
  Type: "AWS::Lambda::Permission"
  DependsOn:
    - apiGateway
    - {{ lambda_name }}LambdaFunction
  Properties:
    Action: "lambda:InvokeFunction"
    FunctionName: 
      Fn::GetAtt: ["{{ lambda_name }}LambdaFunction", "Arn"] # arn:aws:lambda:${Region}:${AccountId}:function:{{ lambda_name }}-${Environment} # [lambdaFunction, Arn]
    Principal: apigateway.amazonaws.com
    SourceArn:
      Fn::Sub: "arn:aws:execute-api:${Region}:${AccountId}:${apiGateway}/*"

{{ lambda_name }}LambdaFunction:
  Type: AWS::Lambda::Function
  Properties: 
    Code: 
      ZipFile: |
        const AWS = require('aws-sdk');

        const dynamo = new AWS.DynamoDB.DocumentClient();

        /**
        * Demonstrates a simple HTTP endpoint using API Gateway. You have full
        * access to the request and response payload, including headers and
        * status code.
        *
        * To scan a DynamoDB table, make a GET request with the TableName as a
        * query string parameter. To put, update, or delete an item, make a POST,
        * PUT, or DELETE request respectively, passing in the payload to the
        * DynamoDB API as a JSON body.
        */
        exports.handler = async (event, context) => {
            let body;
            let statusCode = '200';
            const headers = {
                'Content-Type': 'application/json',
                "Access-Control-Allow-Origin" : "*", // Required for CORS support to work
                "Access-Control-Allow-Credentials" : true // Required for cookies, authorization headers with HTTPS 
            };

            try {
                switch (event.httpMethod) {
                    case 'DELETE':
                        body = await dynamo.delete(JSON.parse(event.body)).promise();
                        break;
                    case 'GET':
                        body = await dynamo.scan({ TableName: event.queryStringParameters.TableName }).promise();
                        break;
                    case 'POST':
                        body = await dynamo.put(JSON.parse(event.body)).promise();
                        break;
                    case 'PUT':
                        body = await dynamo.update(JSON.parse(event.body)).promise();
                        break;
                    default:
                        throw new Error(`Unsupported method "${event.httpMethod}"`);
                }
            } catch (err) {
                statusCode = '400';
                body = err.message;
            } finally {
                body = JSON.stringify(body);
            }
            return {
                statusCode,
                body,
                headers,
            };
        };
    FunctionName: 
      Fn::Sub: "{{ lambda_name }}-${Environment}"
    Handler: "index.handler"
    Role:
      Fn::GetAtt: ["{{ lambda_name }}Role", "Arn"]
    Runtime: nodejs12.x