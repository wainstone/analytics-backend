---
{{ lambda_name }}Role{{ env }}:
  Type: AWS::IAM::Role
  Properties:
    RoleName: {{ lambda_name }}Role-{{ env }}
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
      - Effect: Allow
        Principal:
          Service:
          - lambda.amazonaws.com
        Action:
        - sts:AssumeRole
    Path: "/"
    Policies:
    - PolicyName: AWSLambdaBasicExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: "*"
    - PolicyName: AthlyticsDynamoAccess
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - "dynamodb:*"
          Resource: 
            Fn::Sub: "arn:aws:dynamodb:ca-central-1:${AccountId}:table/${TableName}-${Environment}"


{{ lambda_name }}ApiMethod:
  Type: AWS::ApiGateway::Method
  Properties:
    ApiKeyRequired: False
    AuthorizationType: NONE
    HttpMethod: {{ http_method }}
    Integration: 
      IntegrationHttpMethod: POST
      Type: AWS_PROXY
      Uri: 
        Fn::Sub: "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${Region}:${AccountId}:function:{{ lambda_name }}-${Environment}/invocations"
    OperationName: {{ lambda_name }}
    ResourceId:
      Ref: {{ api_resource }}
    RestApiId:
      Ref: apiGateway

{{ lambda_name }}ApiGatewayInvoke:
  Type: "AWS::Lambda::Permission"
  DependsOn:
    - apiGateway
    - {{ lambda_name }}LambdaFunction
  Properties:
    Action: "lambda:InvokeFunction"
    FunctionName: 
      Fn::GetAtt: ["{{ lambda_name }}LambdaFunction", "Arn"] # arn:aws:lambda:${Region}:${AccountId}:function:{{ lambda_name }}-${Environment} # [lambdaFunction, Arn]
    Principal: apigateway.amazonaws.com
    SourceArn:
      Fn::Sub: "arn:aws:execute-api:${Region}:${AccountId}:${apiGateway}/*"

{{ lambda_name }}LambdaFunction:
  Type: AWS::Lambda::Function
  Properties: 
    Code: 
      S3Bucket: "{{ s3_bucket }}"
      S3Key: "{{ s3_key }}"
    FunctionName: 
      Fn::Sub: "{{ lambda_name }}-${Environment}"
    Handler: "index.handler"
    Role:
      Fn::GetAtt: ["{{ lambda_name }}Role{{ env }}", "Arn"]
    Runtime: nodejs12.x
    Timeout: 60
    MemorySize: 500
    Environment:
      Variables:
        ANALYSIS_ATHLETES_TABLE: athlytics_jy75-{{ env }} # This and the below should be changed once we have two databases 
        PROSPECTIVE_ATHLETES_TABLE: athlytics_jy75-{{ env }} 